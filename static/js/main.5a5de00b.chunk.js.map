{"version":3,"sources":["config.js","components/weather.jsx","components/form.jsx","App.js","serviceWorker.js","index.js"],"names":["config","key","Weather","props","className","city","icon","temp","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadWeather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","fetch","api_call","json","response","console","log","setState","tempCelsius","main","weather","get_weatherIcons","id","state","undefined","weatherIcon","thunderstorm","drizzle","rain","snow","atmosphere","clear","clouds","Math","floor","rangeId","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5a5de00b.chunk.js","sourcesContent":["const config={\r\n    key:'1fa84376bbcb82908609616c4186b9b3'\r\n}\r\nexport default config;","import React from 'react';\r\nconst Weather = (props) => {\r\n    return ( \r\n        <div className=\"container\">\r\n            <div className=\"cards pt-4\">\r\n            <h1>{props.city}</h1>\r\n            <h5 className=\"py-4\">\r\n            <i className={`wi ${props.icon} display-1`}></i>\r\n            </h5>\r\n            {props.temp?<h3 className=\"py-2\">{props.temp}&deg;C</h3>:null}\r\n            {minmaxTemp(props.temp_min,props.temp_max)}\r\n            <h2 className=\"py-3\">{props.description}</h2>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\nfunction minmaxTemp(min,max){\r\n    if(min&&max)\r\n    {\r\n    return(\r\n    <h3>\r\n    <span className=\"px-4\">Minimum-{min}&deg;C</span>\r\n    <span className=\"px-4\">Maximum-{max}&deg;C</span>\r\n    </h3>\r\n);\r\n    }\r\n}\r\n \r\nexport default Weather;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Form=(props)=>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div>{props.error?error():null}</div>\r\n            <form onSubmit={props.loadWeather}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2\">\r\n                    <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"on \" placeholder=\"City\"/>\r\n                </div>\r\n                <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\r\n                    <button className=\"btn btn-warning\">Get Weather</button>\r\n                </div>\r\n            </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please enter City name\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\nimport config from './config.js';\nimport Weather from './components/weather';\nimport Form from './components/form';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.min.css';\n\nclass App extends Component {\nconstructor(){\n  super();\n  this.state={\n    city:undefined,\n    temp:undefined,\n    temp_max:undefined,\n    temp_min:undefined,\n    icon:undefined,\n    error:false,\n    description:\"\"\n  };\n  this.weatherIcon={\n    thunderstorm :\"wi-thunderstorm\",\n    drizzle:\"wi-sleet\",\n    rain:\"wi-storm-showers\",\n    snow:\"wi-snow\",\n    atmosphere:\"wi-fog\",\n    clear:\"wi-day-sunny\",\n    clouds:\"wi-day-fog\"\n  };\n}\n\ntempCelsius(temp){\n  let cel=Math.floor(temp-273.15);\n  return cel;\n}\n\nget_weatherIcons(rangeId){\n  switch(true){\n    case rangeId>=200&&rangeId<=232:\n      this.setState({icon:this.weatherIcon.thunderstorm});\n      break;\n      case rangeId>=300&&rangeId<=321:\n      this.setState({icon:this.weatherIcon.drizzle});\n      break;\n      case rangeId>=500&&rangeId<=531:\n      this.setState({icon:this.weatherIcon.rain});\n      break;\n      case rangeId>=600&&rangeId<=622:\n      this.setState({icon:this.weatherIcon.snow});\n      break;\n      case rangeId>=701&&rangeId<=781:\n      this.setState({icon:this.weatherIcon.atmosphere});\n      break;\n      case rangeId===800:\n        this.setState({icon:this.weatherIcon.clear});\n        break;\n      default:\n      this.setState({icon:this.weatherIcon.clouds});\n  }\n}\n\ngetWeather=async(e)=>{\n  e.preventDefault();\n  const city=e.target.elements.city.value;\n  if(city)\n  { \n  const api_call=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=${config.key}`);\n  const response=await api_call.json();\n  console.log(response);\n  this.setState({\n    city:response.name,\n    temp:this.tempCelsius(response.main.temp),\n    temp_max:this.tempCelsius(response.main.temp_max),\n    temp_min:this.tempCelsius(response.main.temp_min),\n    description:response.weather[0].description,\n    error:false\n  });\n  this.get_weatherIcons(response.weather[0].id);\n}\nelse\nthis.setState({error:true});\n};\n  render() { \n    return (\n      <div className=\"App\">\n        <Form loadWeather={this.getWeather} error={this.state.error}/>\n      <Weather \n      city={this.state.city} \n      temp={this.state.temp} \n      temp_max={this.state.temp_max} \n      temp_min={this.state.temp_min} \n      icon={this.state.icon} \n      description={this.state.description}/> \n    </div>\n      );\n  }\n}\n \nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}